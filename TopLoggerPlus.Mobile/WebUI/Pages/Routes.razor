@page "/routes"
@inject TopLoggerPlus.Logic.RouteService RouteService

<h3>Routes</h3>

@if (_routes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Grade</th>
                <th>Rope</th>
                <th>Wall</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var route in _routes)
            {
                <tr style="background-color: @(route.TopType != TopLoggerPlus.Logic.Model.RouteTopType.NotTopped ? "#def5cb" : "")">
                    <td><span class="fa fa-circle" style="color: @route.Color.Value"></span> @route.Grade</td>
                    <td>@route.Rope</td>
                    <td>@route.Wall</td>
                    @switch (route.TopType)
                    {
                        case Logic.Model.RouteTopType.OnSight:
                            <td>OS</td>
                            break;
                        case Logic.Model.RouteTopType.Flash:
                            <td>FL</td>
                            break;
                        case Logic.Model.RouteTopType.RedPoint:
                            <td>RP</td>
                            break;
                        case Logic.Model.RouteTopType.NotTopped:
                            <td></td>
                            break;
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<TopLoggerPlus.Logic.Model.Route> _routes;

    protected override async Task OnInitializedAsync()
    {
        var routes = await RouteService.GetRoutes();
        _routes = routes.OrderBy(x => x.GradeNumber).ThenBy(x => x.Rope).ToList();
    }
}
