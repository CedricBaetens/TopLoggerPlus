@page "/compare"
@inject TopLoggerPlus.Logic.RouteService RouteService
@inject TopLoggerPlus.Logic.UserService UserService

<h3>Compare</h3>


@if (_users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="form-group">
        <label>User 1:</label>
        <select class="form-control" @bind="_userId1">
            @foreach (var user in _users)
            {
                <option value="@user.Id">@user.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label>User 2:</label>
        <select class="form-control" @bind="_userId2">
            @foreach (var user in _users)
            {
                <option value="@user.Id">@user.Name</option>
            }
        </select>
    </div>
    <button class="btn btn-primary" @onclick="Search">Search</button>
}


@if (_routes != null)
{
    <div class="mt-3">
        <span>Routes: @_routes.Count</span>
    </div>
    <table class="table mt-3">
        <thead>
            <tr>
                <th>Grade</th>
                <th>Rope</th>
                <th>Wall</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var route in _routes)
            {
                <tr style="background-color: @(route.Ascends.Any() ? "#def5cb" : "")">
                    <td><span class="fa fa-circle" style="color: @route.Color.Value"></span> @route.Grade</td>
                    <td>@route.Rope</td>
                    <td>@route.Wall</td>
                    @switch (route.Ascends.Max(a => a.TopType))
                    {
                        case Logic.Model.RouteTopType.OnSight:
                            <td>OS</td>
                            break;
                        case Logic.Model.RouteTopType.Flash:
                            <td>FL</td>
                            break;
                        case Logic.Model.RouteTopType.RedPoint:
                            <td>RP</td>
                            break;
                        case Logic.Model.RouteTopType.NotTopped:
                            <td></td>
                            break;
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<TopLoggerPlus.Logic.Model.Route> _routes;
    private List<TopLoggerPlus.Logic.Model.User> _users;

    private string _userId1;
    private string _userId2;

    protected override async Task OnInitializedAsync()
    {
        _users = (await UserService.GetUsers(49)).OrderBy(x => x.Name).ToList();
        _userId1 = "9889643268";
        _userId2 = "2538343134";
    }

    private async Task LoadRoutes()
    {
        var routes = await RouteService.GetRoutesAsync(_userId1, _userId2);
        _routes = routes
            .Where(x => x.Wall.ToUpper().Contains("SECTOR"))
            .OrderBy(x => x.GradeNumber).ThenBy(x => x.Rope)
            .ToList();
    }

    private async Task Search()
    {
        _routes = null;
        await LoadRoutes();
    }
}
